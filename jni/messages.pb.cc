// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace net {
namespace moraleboost {
namespace mecab {
namespace impl {

namespace {

const ::google::protobuf::Descriptor* ParsingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParsingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParsingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParsingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParsingResponse_Morpheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParsingResponse_Morpheme_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  ParsingRequest_descriptor_ = file->message_type(0);
  static const int ParsingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingRequest, text_),
  };
  ParsingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParsingRequest_descriptor_,
      ParsingRequest::default_instance_,
      ParsingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParsingRequest));
  ParsingResponse_descriptor_ = file->message_type(1);
  static const int ParsingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse, morpheme_),
  };
  ParsingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParsingResponse_descriptor_,
      ParsingResponse::default_instance_,
      ParsingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParsingResponse));
  ParsingResponse_Morpheme_descriptor_ = ParsingResponse_descriptor_->nested_type(0);
  static const int ParsingResponse_Morpheme_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse_Morpheme, surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse_Morpheme, blank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse_Morpheme, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse_Morpheme, posid_),
  };
  ParsingResponse_Morpheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParsingResponse_Morpheme_descriptor_,
      ParsingResponse_Morpheme::default_instance_,
      ParsingResponse_Morpheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse_Morpheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsingResponse_Morpheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParsingResponse_Morpheme));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParsingRequest_descriptor_, &ParsingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParsingResponse_descriptor_, &ParsingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParsingResponse_Morpheme_descriptor_, &ParsingResponse_Morpheme::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete ParsingRequest::default_instance_;
  delete ParsingRequest_reflection_;
  delete ParsingResponse::default_instance_;
  delete ParsingResponse_reflection_;
  delete ParsingResponse_Morpheme::default_instance_;
  delete ParsingResponse_Morpheme_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\032net.moraleboost.mecab."
    "impl\"\036\n\016ParsingRequest\022\014\n\004text\030\001 \002(\t\"\245\001\n"
    "\017ParsingResponse\022F\n\010morpheme\030\001 \003(\01324.net"
    ".moraleboost.mecab.impl.ParsingResponse."
    "Morpheme\032J\n\010Morpheme\022\017\n\007surface\030\001 \002(\t\022\r\n"
    "\005blank\030\002 \001(\t\022\017\n\007feature\030\003 \002(\t\022\r\n\005posid\030\004"
    " \002(\r", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  ParsingRequest::default_instance_ = new ParsingRequest();
  ParsingResponse::default_instance_ = new ParsingResponse();
  ParsingResponse_Morpheme::default_instance_ = new ParsingResponse_Morpheme();
  ParsingRequest::default_instance_->InitAsDefaultInstance();
  ParsingResponse::default_instance_->InitAsDefaultInstance();
  ParsingResponse_Morpheme::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;


// ===================================================================

const ::std::string ParsingRequest::_default_text_;
#ifndef _MSC_VER
const int ParsingRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ParsingRequest::ParsingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParsingRequest::InitAsDefaultInstance() {}

ParsingRequest::ParsingRequest(const ParsingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParsingRequest::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParsingRequest::~ParsingRequest() {
  SharedDtor();
}

void ParsingRequest::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ParsingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParsingRequest_descriptor_;
}

const ParsingRequest& ParsingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

ParsingRequest* ParsingRequest::default_instance_ = NULL;

ParsingRequest* ParsingRequest::New() const {
  return new ParsingRequest;
}

void ParsingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParsingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_text()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParsingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ParsingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParsingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParsingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ParsingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParsingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParsingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParsingRequest::MergeFrom(const ParsingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParsingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingRequest::CopyFrom(const ParsingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingRequest::Swap(ParsingRequest* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ParsingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ParsingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ParsingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ParsingRequest_reflection_;
}

// ===================================================================

const ::std::string ParsingResponse_Morpheme::_default_surface_;
const ::std::string ParsingResponse_Morpheme::_default_blank_;
const ::std::string ParsingResponse_Morpheme::_default_feature_;
#ifndef _MSC_VER
const int ParsingResponse_Morpheme::kSurfaceFieldNumber;
const int ParsingResponse_Morpheme::kBlankFieldNumber;
const int ParsingResponse_Morpheme::kFeatureFieldNumber;
const int ParsingResponse_Morpheme::kPosidFieldNumber;
#endif  // !_MSC_VER

ParsingResponse_Morpheme::ParsingResponse_Morpheme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParsingResponse_Morpheme::InitAsDefaultInstance() {}

ParsingResponse_Morpheme::ParsingResponse_Morpheme(const ParsingResponse_Morpheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParsingResponse_Morpheme::SharedCtor() {
  _cached_size_ = 0;
  surface_ = const_cast< ::std::string*>(&_default_surface_);
  blank_ = const_cast< ::std::string*>(&_default_blank_);
  feature_ = const_cast< ::std::string*>(&_default_feature_);
  posid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParsingResponse_Morpheme::~ParsingResponse_Morpheme() {
  SharedDtor();
}

void ParsingResponse_Morpheme::SharedDtor() {
  if (surface_ != &_default_surface_) {
    delete surface_;
  }
  if (blank_ != &_default_blank_) {
    delete blank_;
  }
  if (feature_ != &_default_feature_) {
    delete feature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ParsingResponse_Morpheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParsingResponse_Morpheme_descriptor_;
}

const ParsingResponse_Morpheme& ParsingResponse_Morpheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

ParsingResponse_Morpheme* ParsingResponse_Morpheme::default_instance_ = NULL;

ParsingResponse_Morpheme* ParsingResponse_Morpheme::New() const {
  return new ParsingResponse_Morpheme;
}

void ParsingResponse_Morpheme::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (surface_ != &_default_surface_) {
        surface_->clear();
      }
    }
    if (_has_bit(1)) {
      if (blank_ != &_default_blank_) {
        blank_->clear();
      }
    }
    if (_has_bit(2)) {
      if (feature_ != &_default_feature_) {
        feature_->clear();
      }
    }
    posid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParsingResponse_Morpheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string surface = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_surface()));
        if (input->ExpectTag(18)) goto parse_blank;
        break;
      }
      
      // optional string blank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_blank:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_blank()));
        if (input->ExpectTag(26)) goto parse_feature;
        break;
      }
      
      // required string feature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_feature:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_feature()));
        if (input->ExpectTag(32)) goto parse_posid;
        break;
      }
      
      // required uint32 posid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_posid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParsingResponse_Morpheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ParsingResponse_Morpheme::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string surface = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->surface(), output);
  }
  
  // optional string blank = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->blank(), output);
  }
  
  // required string feature = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->feature(), output);
  }
  
  // required uint32 posid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParsingResponse_Morpheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string surface = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->surface(), target);
  }
  
  // optional string blank = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->blank(), target);
  }
  
  // required string feature = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->feature(), target);
  }
  
  // required uint32 posid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParsingResponse_Morpheme::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string surface = 1;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->surface());
    }
    
    // optional string blank = 2;
    if (has_blank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->blank());
    }
    
    // required string feature = 3;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->feature());
    }
    
    // required uint32 posid = 4;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ParsingResponse_Morpheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParsingResponse_Morpheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParsingResponse_Morpheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParsingResponse_Morpheme::MergeFrom(const ParsingResponse_Morpheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_surface(from.surface());
    }
    if (from._has_bit(1)) {
      set_blank(from.blank());
    }
    if (from._has_bit(2)) {
      set_feature(from.feature());
    }
    if (from._has_bit(3)) {
      set_posid(from.posid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParsingResponse_Morpheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingResponse_Morpheme::CopyFrom(const ParsingResponse_Morpheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingResponse_Morpheme::Swap(ParsingResponse_Morpheme* other) {
  if (other != this) {
    std::swap(surface_, other->surface_);
    std::swap(blank_, other->blank_);
    std::swap(feature_, other->feature_);
    std::swap(posid_, other->posid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ParsingResponse_Morpheme::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ParsingResponse_Morpheme::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ParsingResponse_Morpheme::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ParsingResponse_Morpheme_reflection_;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParsingResponse::kMorphemeFieldNumber;
#endif  // !_MSC_VER

ParsingResponse::ParsingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParsingResponse::InitAsDefaultInstance() {}

ParsingResponse::ParsingResponse(const ParsingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParsingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParsingResponse::~ParsingResponse() {
  SharedDtor();
}

void ParsingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ParsingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParsingResponse_descriptor_;
}

const ParsingResponse& ParsingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

ParsingResponse* ParsingResponse::default_instance_ = NULL;

ParsingResponse* ParsingResponse::New() const {
  return new ParsingResponse;
}

void ParsingResponse::Clear() {
  morpheme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParsingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .net.moraleboost.mecab.impl.ParsingResponse.Morpheme morpheme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_morpheme:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_morpheme()));
        if (input->ExpectTag(10)) goto parse_morpheme;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParsingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ParsingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .net.moraleboost.mecab.impl.ParsingResponse.Morpheme morpheme = 1;
  for (int i = 0; i < this->morpheme_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->morpheme(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParsingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.moraleboost.mecab.impl.ParsingResponse.Morpheme morpheme = 1;
  for (int i = 0; i < this->morpheme_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->morpheme(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParsingResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .net.moraleboost.mecab.impl.ParsingResponse.Morpheme morpheme = 1;
  total_size += 1 * this->morpheme_size();
  for (int i = 0; i < this->morpheme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->morpheme(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ParsingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParsingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParsingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParsingResponse::MergeFrom(const ParsingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  morpheme_.MergeFrom(from.morpheme_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParsingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingResponse::CopyFrom(const ParsingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingResponse::Swap(ParsingResponse* other) {
  if (other != this) {
    morpheme_.Swap(&other->morpheme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ParsingResponse::IsInitialized() const {
  
  for (int i = 0; i < morpheme_size(); i++) {
    if (!this->morpheme(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* ParsingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ParsingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ParsingResponse_reflection_;
}

}  // namespace impl
}  // namespace mecab
}  // namespace moraleboost
}  // namespace net
