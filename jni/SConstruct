# -*- coding: utf-8 -*-
import os
from os.path import join, abspath
env = Environment(ENV=os.environ)
javahome = None
mecabhome = None
protobufhome = None
nomanifest = False

# $JAVA_HOME/include and $JAVA_HOME/include/(platform) are added to include path.
if 'JAVA_HOME' in os.environ:
	javahome = os.environ['JAVA_HOME']

# $MECAB_HOME/sdk is added to include path and library path on Windows platforms.
if 'MECAB_HOME' in os.environ:
	mecabhome = os.environ['MECAB_HOME']

# $PROTOBUF_HOME/include is added to include path.
# $PROTOBUF_HOME/lib is added to library path.
if 'PROTOBUF_HOME' in os.environ:
	protobufhome = os.environ['PROTOBUF_HOME']

# If set, skip manifest embedding on Windows platforms.
if 'NO_MANIFEST' in os.environ:
	nomanifest = True

if len(COMMAND_LINE_TARGETS) > 0:
	target = COMMAND_LINE_TARGETS[0].upper()
else:
	target = 'ALL'

if env['PLATFORM'] == 'win32':
	if javahome == None or javahome == '':
		javahome = r'C:\Program Files\Java\jdk1.6.0_21'
	if mecabhome == None or mecabhome == '':
		mecabhome = r'C:\Program Files\MeCab'
	if protobufhome == None or protobufhome == '':
		protobufhome = r'C:\Home\lib\protobuf'

	incpath = [join(javahome, 'include'),
		   join(javahome, 'include', 'win32'),
		   join(mecabhome, 'sdk'),
		   join(protobufhome, 'include')]
	
	libpath = [join(mecabhome, 'sdk'),
		   join(protobufhome, 'lib')]
	
	libs = ['libmecab', 'libprotobuf']

	ccflags = (['/DDLL_IMPORT', '/MD', '/EHsc', '/Ox'] +
		   ['/I' + item for item in incpath])
	
	env.AppendUnique(
		CCFLAGS=ccflags,
		LIBPATH=libpath,
		LIBS=libs)
else:
	if mecabhome == None or mecabhome == '':
		mecabhome = r'/usr/local'
	if protobufhome == None or protobufhome == '':
		protobufhome = r'/usr/local'
	
	incpath = ['/usr/include', '/usr/local/include', join(mecabhome, 'include'), join(protobufhome, 'include')]
	libpath = ['/usr/lib', '/usr/local/lib', join(mecabhome, 'lib'), join(protobufhome, 'lib')]
	
	if env['PLATFORM'] == 'sunos':
		if javahome == None or javahome == '':
			javahome = r'/usr/java'
		incpath.append(join(javahome, 'include'))
		incpath.append(join(javahome, 'include', 'solaris'))
	else:
		if javahome == None or javahome == '':
			javahome = '/usr/lib/jvm/java-6-sun'
		incpath.append(join(javahome, 'include'))
		incpath.append(join(javahome, 'include', 'linux'))

	libs = ['mecab', 'protobuf']

	ccflags = (['-Wall', '-g', '-O2'] +
		   ['-I' + item for item in incpath])
	
	env.AppendUnique(
		CCFLAGS=ccflags,
		LIBPATH=libpath,
		LIBS=libs)


# javah
def do_javah():
	classdir = join('..', 'bin', 'classes')
	impldir = join(classdir, 'net', 'moraleboost', 'mecab', 'impl')
	return env.JavaH(
		target='.',
		source=[join(impldir, 'StandardTagger.class'),
				join(impldir, 'StandardNode.class'),
				join(impldir, 'LocalProtobufTagger.class')],
		JAVACLASSDIR=classdir)

# protoc (C++ & Java)
def do_protoc():
	protopath = abspath(join('..', 'etc', 'protobuf'))
	return env.Command(
		['messages.pb.cc', 'messages.pb.h'],
		join(protopath, 'messages.proto'),
		('protoc --cpp_out=. --java_out=' + join('..', 'src') +
		' "--proto_path=' + protopath + '" ${SOURCE}'))

# shared library
def do_build_library():
	return env.SharedLibrary('CMeCab', ['mecab.cpp'])

# shared library (with protobuf)
def do_build_library_with_protobuf():
	return env.SharedLibrary(
		'CMeCab_protobuf',
		['mecab_protobuf.cpp', 'messages.pb.cc'])

# manifest (Windows only)
def do_embed_manifest(shared_lib, dll_name):
	Clean(shared_lib, dll_name + '.dll.manifest')
	return env.Command(
		'Manifest' + dll_name + ".dll", shared_lib,
		('mt.exe -manifest ${SOURCE}.manifest ' +
		'-outputresource:${SOURCE};2 -nologo'))


# build script
do_javah()
do_protoc()
shared_lib = do_build_library()
shared_lib_protobuf = do_build_library_with_protobuf()

if env['PLATFORM'] == 'win32' and not nomanifest:
	Default(do_embed_manifest(shared_lib, 'CMeCab'),
			do_embed_manifest(shared_lib_protobuf, 'CMeCab_protobuf'))
else:
	Default(shared_lib, shared_lib_protobuf)

